// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(LiquidWalletKitFFI)
    import LiquidWalletKitFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_lwk_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_lwk_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol AddressProtocol: AnyObject {
    func isBlinded() -> Bool

    /**
     * Returns a string of the QR code printable in a terminal environment
     */
    func qrCodeText() throws -> String

    /**
     * Returns a string encoding an image in a uri
     *
     * The string can be open in the browser or be used as `src` field in `img` in HTML
     *
     * For max efficiency we suggest to pass `None` to `pixel_per_module`, get a very small image
     * and use styling to scale up the image in the browser. eg
     * `style="image-rendering: pixelated; border: 20px solid white;"`
     */
    func qrCodeUri(pixelPerModule: UInt8?) throws -> String

    func scriptPubkey() -> Script

    func toUnconfidential() -> Address
}

public class Address:
    CustomStringConvertible,
    AddressProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_address(self.pointer, $0) }
    }

    /**
     * Construct an Address object
     */
    public convenience init(s: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_address_new(
                FfiConverterString.lower(s), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_address(pointer, $0) }
    }

    public func isBlinded() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_address_is_blinded(self.uniffiClonePointer(), $0)
                }
        )
    }

    /**
     * Returns a string of the QR code printable in a terminal environment
     */
    public func qrCodeText() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_address_qr_code_text(self.uniffiClonePointer(), $0)
            }
        )
    }

    /**
     * Returns a string encoding an image in a uri
     *
     * The string can be open in the browser or be used as `src` field in `img` in HTML
     *
     * For max efficiency we suggest to pass `None` to `pixel_per_module`, get a very small image
     * and use styling to scale up the image in the browser. eg
     * `style="image-rendering: pixelated; border: 20px solid white;"`
     */
    public func qrCodeUri(pixelPerModule: UInt8?) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_address_qr_code_uri(self.uniffiClonePointer(),
                                                         FfiConverterOptionUInt8.lower(pixelPerModule), $0)
            }
        )
    }

    public func scriptPubkey() -> Script {
        return try! FfiConverterTypeScript.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_address_script_pubkey(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func toUnconfidential() -> Address {
        return try! FfiConverterTypeAddress.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_address_to_unconfidential(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_address_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeAddress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Address

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Address {
        return Address(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Address) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAddress_lift(_ pointer: UnsafeMutableRawPointer) throws -> Address {
    return try FfiConverterTypeAddress.lift(pointer)
}

public func FfiConverterTypeAddress_lower(_ value: Address) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddress.lower(value)
}

public protocol AddressResultProtocol: AnyObject {
    func address() -> Address

    func index() -> UInt32
}

public class AddressResult:
    AddressResultProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_addressresult(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_addressresult(pointer, $0) }
    }

    public func address() -> Address {
        return try! FfiConverterTypeAddress.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_addressresult_address(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func index() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_addressresult_index(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeAddressResult: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddressResult

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressResult {
        return AddressResult(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddressResult) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressResult {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddressResult, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAddressResult_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressResult {
    return try FfiConverterTypeAddressResult.lift(pointer)
}

public func FfiConverterTypeAddressResult_lower(_ value: AddressResult) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddressResult.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::Contract`]
 */
public protocol ContractProtocol: AnyObject {}

/**
 * Wrapper over [`lwk_wollet::Contract`]
 */
public class Contract:
    CustomStringConvertible,
    ContractProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_contract(self.pointer, $0) }
    }

    /**
     * Construct a Contract object
     */
    public convenience init(domain: String, issuerPubkey: String, name: String, precision: UInt8, ticker: String, version: UInt8) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_contract_new(
                FfiConverterString.lower(domain),
                FfiConverterString.lower(issuerPubkey),
                FfiConverterString.lower(name),
                FfiConverterUInt8.lower(precision),
                FfiConverterString.lower(ticker),
                FfiConverterUInt8.lower(version), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_contract(pointer, $0) }
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_contract_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeContract: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Contract

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Contract {
        return Contract(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Contract) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contract {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Contract, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeContract_lift(_ pointer: UnsafeMutableRawPointer) throws -> Contract {
    return try FfiConverterTypeContract.lift(pointer)
}

public func FfiConverterTypeContract_lower(_ value: Contract) -> UnsafeMutableRawPointer {
    return FfiConverterTypeContract.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::ElectrumClient`]
 */
public protocol ElectrumClientProtocol: AnyObject {
    func broadcast(tx: Transaction) throws -> Txid

    func fullScan(wollet: Wollet) throws -> Update?
}

/**
 * Wrapper over [`lwk_wollet::ElectrumClient`]
 */
public class ElectrumClient:
    ElectrumClientProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_electrumclient(self.pointer, $0) }
    }

    /**
     * Construct an Electrum client
     */
    public convenience init(electrumUrl: String, tls: Bool, validateDomain: Bool) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_electrumclient_new(
                FfiConverterString.lower(electrumUrl),
                FfiConverterBool.lower(tls),
                FfiConverterBool.lower(validateDomain), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_electrumclient(pointer, $0) }
    }

    public func broadcast(tx: Transaction) throws -> Txid {
        return try FfiConverterTypeTxid.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_electrumclient_broadcast(self.uniffiClonePointer(),
                                                              FfiConverterTypeTransaction.lower(tx), $0)
            }
        )
    }

    public func fullScan(wollet: Wollet) throws -> Update? {
        return try FfiConverterOptionTypeUpdate.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_electrumclient_full_scan(self.uniffiClonePointer(),
                                                              FfiConverterTypeWollet.lower(wollet), $0)
            }
        )
    }
}

public struct FfiConverterTypeElectrumClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ElectrumClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ElectrumClient {
        return ElectrumClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ElectrumClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ElectrumClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ElectrumClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeElectrumClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> ElectrumClient {
    return try FfiConverterTypeElectrumClient.lift(pointer)
}

public func FfiConverterTypeElectrumClient_lower(_ value: ElectrumClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeElectrumClient.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::EsploraClient`]
 */
public protocol EsploraClientProtocol: AnyObject {
    func broadcast(tx: Transaction) throws -> Txid

    func fullScan(wollet: Wollet) throws -> Update?
}

/**
 * Wrapper over [`lwk_wollet::EsploraClient`]
 */
public class EsploraClient:
    EsploraClientProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_esploraclient(self.pointer, $0) }
    }

    /**
     * Construct an Esplora Client
     */
    public convenience init(url: String) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_esploraclient_new(
                FfiConverterString.lower(url), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_esploraclient(pointer, $0) }
    }

    public func broadcast(tx: Transaction) throws -> Txid {
        return try FfiConverterTypeTxid.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_esploraclient_broadcast(self.uniffiClonePointer(),
                                                             FfiConverterTypeTransaction.lower(tx), $0)
            }
        )
    }

    public func fullScan(wollet: Wollet) throws -> Update? {
        return try FfiConverterOptionTypeUpdate.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_esploraclient_full_scan(self.uniffiClonePointer(),
                                                             FfiConverterTypeWollet.lower(wollet), $0)
            }
        )
    }
}

public struct FfiConverterTypeEsploraClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EsploraClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EsploraClient {
        return EsploraClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EsploraClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EsploraClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EsploraClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeEsploraClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> EsploraClient {
    return try FfiConverterTypeEsploraClient.lift(pointer)
}

public func FfiConverterTypeEsploraClient_lower(_ value: EsploraClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEsploraClient.lower(value)
}

/**
 * An exported trait, useful for caller-defined persistence.
 */
public protocol ForeignPersister: AnyObject {
    func get(index: UInt64) throws -> Update?

    func push(update: Update) throws
}

/**
 * An exported trait, useful for caller-defined persistence.
 */
public class ForeignPersisterImpl:
    ForeignPersister
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_foreignpersister(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_foreignpersister(pointer, $0) }
    }

    public func get(index: UInt64) throws -> Update? {
        return try FfiConverterOptionTypeUpdate.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_foreignpersister_get(self.uniffiClonePointer(),
                                                          FfiConverterUInt64.lower(index), $0)
            }
        )
    }

    public func push(update: Update) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_foreignpersister_push(self.uniffiClonePointer(),
                                                           FfiConverterTypeUpdate.lower(update), $0)
            }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for ForeignPersister Callback Interface

private let uniffiCallbackInterfaceForeignPersister: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeGet(_ swiftCallbackInterface: ForeignPersister, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result = try swiftCallbackInterface.get(
                index: FfiConverterUInt64.read(from: &reader)
            )
            var writer = [UInt8]()
            FfiConverterOptionTypeUpdate.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as LwkError {
            out_buf.pointee = FfiConverterTypeLwkError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    func invokePush(_ swiftCallbackInterface: ForeignPersister, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.push(
                update: FfiConverterTypeUpdate.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as LwkError {
            out_buf.pointee = FfiConverterTypeLwkError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterTypeForeignPersister.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterTypeForeignPersister.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeGet(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    case 2:
        guard let cb = FfiConverterTypeForeignPersister.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokePush(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitForeignPersister() {
    uniffi_lwk_fn_init_callback_foreignpersister(uniffiCallbackInterfaceForeignPersister)
}

public struct FfiConverterTypeForeignPersister: FfiConverter {
    fileprivate static var handleMap = UniFFICallbackHandleMap<ForeignPersister>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ForeignPersister

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ForeignPersister {
        return ForeignPersisterImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ForeignPersister) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ForeignPersister {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ForeignPersister, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeForeignPersister_lift(_ pointer: UnsafeMutableRawPointer) throws -> ForeignPersister {
    return try FfiConverterTypeForeignPersister.lift(pointer)
}

public func FfiConverterTypeForeignPersister_lower(_ value: ForeignPersister) -> UnsafeMutableRawPointer {
    return FfiConverterTypeForeignPersister.lower(value)
}

/**
 * Implements [`ForeignPersister`]
 */
public protocol ForeignPersisterLinkProtocol: AnyObject {}

/**
 * Implements [`ForeignPersister`]
 */
public class ForeignPersisterLink:
    ForeignPersisterLinkProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_foreignpersisterlink(self.pointer, $0) }
    }

    public convenience init(persister: ForeignPersister) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_foreignpersisterlink_new(
                FfiConverterTypeForeignPersister.lower(persister), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_foreignpersisterlink(pointer, $0) }
    }
}

public struct FfiConverterTypeForeignPersisterLink: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ForeignPersisterLink

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ForeignPersisterLink {
        return ForeignPersisterLink(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ForeignPersisterLink) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ForeignPersisterLink {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ForeignPersisterLink, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeForeignPersisterLink_lift(_ pointer: UnsafeMutableRawPointer) throws -> ForeignPersisterLink {
    return try FfiConverterTypeForeignPersisterLink.lift(pointer)
}

public func FfiConverterTypeForeignPersisterLink_lower(_ value: ForeignPersisterLink) -> UnsafeMutableRawPointer {
    return FfiConverterTypeForeignPersisterLink.lower(value)
}

/**
 * Wrapper over [`bip39::Mnemonic`]
 */
public protocol MnemonicProtocol: AnyObject {}

/**
 * Wrapper over [`bip39::Mnemonic`]
 */
public class Mnemonic:
    CustomStringConvertible,
    MnemonicProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_mnemonic(self.pointer, $0) }
    }

    /**
     * Construct a Mnemonic type
     */
    public convenience init(s: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_mnemonic_new(
                FfiConverterString.lower(s), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_mnemonic(pointer, $0) }
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeMnemonic: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Mnemonic

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mnemonic {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Mnemonic, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeMnemonic_lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
    return try FfiConverterTypeMnemonic.lift(pointer)
}

public func FfiConverterTypeMnemonic_lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMnemonic.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::ElementsNetwork`]
 */
public protocol NetworkProtocol: AnyObject {
    func defaultElectrumClient() throws -> ElectrumClient

    func defaultEsploraClient() -> EsploraClient

    func isMainnet() -> Bool

    func policyAsset() -> AssetId

    func txBuilder() -> TxBuilder
}

/**
 * Wrapper over [`lwk_wollet::ElementsNetwork`]
 */
public class Network:
    CustomStringConvertible,
    NetworkProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_network(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_network(pointer, $0) }
    }

    public static func mainnet() -> Network {
        return Network(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_network_mainnet($0)
        })
    }

    public static func regtest(policyAsset: AssetId) -> Network {
        return Network(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_network_regtest(
                FfiConverterTypeAssetId.lower(policyAsset), $0
            )
        })
    }

    public static func regtestDefault() -> Network {
        return Network(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_network_regtest_default($0)
        })
    }

    public static func testnet() -> Network {
        return Network(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_network_testnet($0)
        })
    }

    public func defaultElectrumClient() throws -> ElectrumClient {
        return try FfiConverterTypeElectrumClient.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_network_default_electrum_client(self.uniffiClonePointer(), $0)
            }
        )
    }

    public func defaultEsploraClient() -> EsploraClient {
        return try! FfiConverterTypeEsploraClient.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_network_default_esplora_client(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func isMainnet() -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_network_is_mainnet(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func policyAsset() -> AssetId {
        return try! FfiConverterTypeAssetId.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_network_policy_asset(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func txBuilder() -> TxBuilder {
        return try! FfiConverterTypeTxBuilder.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_network_tx_builder(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_network_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeNetwork: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Network

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Network {
        return Network(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Network) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeNetwork_lift(_ pointer: UnsafeMutableRawPointer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(pointer)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNetwork.lower(value)
}

public protocol OutPointProtocol: AnyObject {
    func txid() -> Txid

    func vout() -> UInt32
}

public class OutPoint:
    CustomStringConvertible,
    OutPointProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_outpoint(self.pointer, $0) }
    }

    /**
     * Construct an OutPoint object
     */
    public convenience init(s: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_outpoint_new(
                FfiConverterString.lower(s), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_outpoint(pointer, $0) }
    }

    public func txid() -> Txid {
        return try! FfiConverterTypeTxid.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_outpoint_txid(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func vout() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_outpoint_vout(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_outpoint_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeOutPoint: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OutPoint

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OutPoint {
        return OutPoint(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OutPoint) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OutPoint {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OutPoint, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeOutPoint_lift(_ pointer: UnsafeMutableRawPointer) throws -> OutPoint {
    return try FfiConverterTypeOutPoint.lift(pointer)
}

public func FfiConverterTypeOutPoint_lower(_ value: OutPoint) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOutPoint.lower(value)
}

/**
 * Wrapper over [`lwk_common::Precision`]
 */
public protocol PrecisionProtocol: AnyObject {
    /**
     * See [`lwk_common::Precision::sats_to_string`]
     */
    func satsToString(sats: Int64) -> String

    /**
     * See [`lwk_common::Precision::string_to_sats`]
     */
    func stringToSats(val: String) throws -> Int64
}

/**
 * Wrapper over [`lwk_common::Precision`]
 */
public class Precision:
    PrecisionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_precision(self.pointer, $0) }
    }

    /**
     * See [`lwk_common::Precision::new`]
     */
    public convenience init(precision: UInt8) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_precision_new(
                FfiConverterUInt8.lower(precision), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_precision(pointer, $0) }
    }

    /**
     * See [`lwk_common::Precision::sats_to_string`]
     */
    public func satsToString(sats: Int64) -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_precision_sats_to_string(self.uniffiClonePointer(),
                                                                  FfiConverterInt64.lower(sats), $0)
                }
        )
    }

    /**
     * See [`lwk_common::Precision::string_to_sats`]
     */
    public func stringToSats(val: String) throws -> Int64 {
        return try FfiConverterInt64.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_precision_string_to_sats(self.uniffiClonePointer(),
                                                              FfiConverterString.lower(val), $0)
            }
        )
    }
}

public struct FfiConverterTypePrecision: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Precision

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Precision {
        return Precision(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Precision) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Precision {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Precision, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypePrecision_lift(_ pointer: UnsafeMutableRawPointer) throws -> Precision {
    return try FfiConverterTypePrecision.lift(pointer)
}

public func FfiConverterTypePrecision_lower(_ value: Precision) -> UnsafeMutableRawPointer {
    return FfiConverterTypePrecision.lower(value)
}

/**
 * Partially Signed Elements Transaction, wrapper over [`elements::pset::PartiallySignedTransaction`]
 */
public protocol PsetProtocol: AnyObject {
    func extractTx() throws -> Transaction

    func issuanceAsset(index: UInt32) -> AssetId?

    func issuanceToken(index: UInt32) -> AssetId?
}

/**
 * Partially Signed Elements Transaction, wrapper over [`elements::pset::PartiallySignedTransaction`]
 */
public class Pset:
    CustomStringConvertible,
    PsetProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_pset(self.pointer, $0) }
    }

    /**
     * Construct a Watch-Only wallet object
     */
    public convenience init(base64: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_pset_new(
                FfiConverterString.lower(base64), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_pset(pointer, $0) }
    }

    public func extractTx() throws -> Transaction {
        return try FfiConverterTypeTransaction.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_pset_extract_tx(self.uniffiClonePointer(), $0)
            }
        )
    }

    public func issuanceAsset(index: UInt32) -> AssetId? {
        return try! FfiConverterOptionTypeAssetId.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_pset_issuance_asset(self.uniffiClonePointer(),
                                                             FfiConverterUInt32.lower(index), $0)
                }
        )
    }

    public func issuanceToken(index: UInt32) -> AssetId? {
        return try! FfiConverterOptionTypeAssetId.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_pset_issuance_token(self.uniffiClonePointer(),
                                                             FfiConverterUInt32.lower(index), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_pset_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypePset: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Pset

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Pset {
        return Pset(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Pset) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Pset {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Pset, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypePset_lift(_ pointer: UnsafeMutableRawPointer) throws -> Pset {
    return try FfiConverterTypePset.lift(pointer)
}

public func FfiConverterTypePset_lower(_ value: Pset) -> UnsafeMutableRawPointer {
    return FfiConverterTypePset.lower(value)
}

public protocol ScriptProtocol: AnyObject {
    func asm() -> String

    func bytes() -> Data
}

public class Script:
    CustomStringConvertible,
    ScriptProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_script(self.pointer, $0) }
    }

    /**
     * Construct a Script object
     */
    public convenience init(hex: Hex) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_script_new(
                FfiConverterTypeHex.lower(hex), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_script(pointer, $0) }
    }

    public func asm() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_script_asm(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func bytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_script_bytes(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_script_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeScript: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Script

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Script {
        return Script(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Script) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Script {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Script, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeScript_lift(_ pointer: UnsafeMutableRawPointer) throws -> Script {
    return try FfiConverterTypeScript.lift(pointer)
}

public func FfiConverterTypeScript_lower(_ value: Script) -> UnsafeMutableRawPointer {
    return FfiConverterTypeScript.lower(value)
}

/**
 * A Software signer, wrapper over [`lwk_signer::SwSigner`]
 */
public protocol SignerProtocol: AnyObject {
    /**
     * Sign the given `pset`
     *
     * Note from an API perspective it would be better to consume the `pset` parameter so it would
     * be clear the signed PSET is the returned one, but it's not possible with uniffi bindings
     */
    func sign(pset: Pset) throws -> Pset

    func wpkhSlip77Descriptor() throws -> WolletDescriptor
}

/**
 * A Software signer, wrapper over [`lwk_signer::SwSigner`]
 */
public class Signer:
    SignerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_signer(self.pointer, $0) }
    }

    /**
     * Construct a software signer
     */
    public convenience init(mnemonic: Mnemonic, network: Network) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_signer_new(
                FfiConverterTypeMnemonic.lower(mnemonic),
                FfiConverterTypeNetwork.lower(network), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_signer(pointer, $0) }
    }

    /**
     * Sign the given `pset`
     *
     * Note from an API perspective it would be better to consume the `pset` parameter so it would
     * be clear the signed PSET is the returned one, but it's not possible with uniffi bindings
     */
    public func sign(pset: Pset) throws -> Pset {
        return try FfiConverterTypePset.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_signer_sign(self.uniffiClonePointer(),
                                                 FfiConverterTypePset.lower(pset), $0)
            }
        )
    }

    public func wpkhSlip77Descriptor() throws -> WolletDescriptor {
        return try FfiConverterTypeWolletDescriptor.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(self.uniffiClonePointer(), $0)
            }
        )
    }
}

public struct FfiConverterTypeSigner: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Signer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Signer {
        return Signer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Signer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Signer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Signer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSigner_lift(_ pointer: UnsafeMutableRawPointer) throws -> Signer {
    return try FfiConverterTypeSigner.lift(pointer)
}

public func FfiConverterTypeSigner_lower(_ value: Signer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSigner.lower(value)
}

/**
 * Represent a test environment with an elements node and an electrum server.
 * useful for testing only, wrapper over [`lwk_test_util::TestElectrumServer`]
 */
public protocol TestEnvProtocol: AnyObject {
    func electrumUrl() -> String

    func generate(blocks: UInt32)

    func getNewAddress() -> Address

    func height() -> UInt64

    func issueAsset(satoshi: UInt64) -> AssetId

    func sendToAddress(address: Address, satoshi: UInt64, asset: AssetId?) -> Txid
}

/**
 * Represent a test environment with an elements node and an electrum server.
 * useful for testing only, wrapper over [`lwk_test_util::TestElectrumServer`]
 */
public class TestEnv:
    TestEnvProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_testenv(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_testenv_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_testenv(pointer, $0) }
    }

    public func electrumUrl() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_testenv_electrum_url(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func generate(blocks: UInt32) {
        try!
            rustCall {
                uniffi_lwk_fn_method_testenv_generate(self.uniffiClonePointer(),
                                                      FfiConverterUInt32.lower(blocks), $0)
            }
    }

    public func getNewAddress() -> Address {
        return try! FfiConverterTypeAddress.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_testenv_get_new_address(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func height() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_testenv_height(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func issueAsset(satoshi: UInt64) -> AssetId {
        return try! FfiConverterTypeAssetId.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_testenv_issue_asset(self.uniffiClonePointer(),
                                                             FfiConverterUInt64.lower(satoshi), $0)
                }
        )
    }

    public func sendToAddress(address: Address, satoshi: UInt64, asset: AssetId?) -> Txid {
        return try! FfiConverterTypeTxid.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_testenv_send_to_address(self.uniffiClonePointer(),
                                                                 FfiConverterTypeAddress.lower(address),
                                                                 FfiConverterUInt64.lower(satoshi),
                                                                 FfiConverterOptionTypeAssetId.lower(asset), $0)
                }
        )
    }
}

public struct FfiConverterTypeTestEnv: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TestEnv

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TestEnv {
        return TestEnv(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TestEnv) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TestEnv {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TestEnv, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeTestEnv_lift(_ pointer: UnsafeMutableRawPointer) throws -> TestEnv {
    return try FfiConverterTypeTestEnv.lift(pointer)
}

public func FfiConverterTypeTestEnv_lower(_ value: TestEnv) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTestEnv.lower(value)
}

public protocol TransactionProtocol: AnyObject {
    func bytes() -> Data

    func fee(policyAsset: AssetId) -> UInt64

    func txid() -> Txid
}

public class Transaction:
    CustomStringConvertible,
    TransactionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_transaction(self.pointer, $0) }
    }

    /**
     * Construct a Transaction object
     */
    public convenience init(hex: Hex) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_transaction_new(
                FfiConverterTypeHex.lower(hex), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_transaction(pointer, $0) }
    }

    public func bytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_transaction_bytes(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func fee(policyAsset: AssetId) -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_transaction_fee(self.uniffiClonePointer(),
                                                         FfiConverterTypeAssetId.lower(policyAsset), $0)
                }
        )
    }

    public func txid() -> Txid {
        return try! FfiConverterTypeTxid.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_transaction_txid(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_transaction_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeTransaction: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Transaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Transaction {
        return Transaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Transaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(pointer)
}

public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTransaction.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::TxBuilder`]
 */
public protocol TxBuilderProtocol: AnyObject {
    /**
     * Burn satoshi units of the given asset
     */
    func addBurn(satoshi: UInt64, asset: AssetId) throws

    /**
     * Add a recipient receiving L-BTC
     */
    func addLbtcRecipient(address: Address, satoshi: UInt64) throws

    /**
     * Add a recipient receiving the given asset
     */
    func addRecipient(address: Address, satoshi: UInt64, asset: AssetId) throws

    /**
     * Sets the address to drain excess L-BTC to
     */
    func drainLbtcTo(address: Address) throws

    /**
     * Select all available L-BTC inputs
     */
    func drainLbtcWallet() throws

    /**
     * Set the fee rate
     */
    func feeRate(rate: Float?) throws

    /**
     * Build the transaction
     */
    func finish(wollet: Wollet) throws -> Pset

    /**
     * Issue an asset, wrapper of [`lwk_wollet::TxBuilder::issue_asset()`]
     */
    func issueAsset(assetSats: UInt64, assetReceiver: Address?, tokenSats: UInt64, tokenReceiver: Address?, contract: Contract?) throws

    /**
     * Reissue an asset, wrapper of [`lwk_wollet::TxBuilder::reissue_asset()`]
     */
    func reissueAsset(assetToReissue: AssetId, satoshiToReissue: UInt64, assetReceiver: Address?, issuanceTx: Transaction?) throws
}

/**
 * Wrapper over [`lwk_wollet::TxBuilder`]
 */
public class TxBuilder:
    CustomStringConvertible,
    TxBuilderProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_txbuilder(self.pointer, $0) }
    }

    /**
     * Construct a transaction builder
     */
    public convenience init(network: Network) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_lwk_fn_constructor_txbuilder_new(
                FfiConverterTypeNetwork.lower(network), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_txbuilder(pointer, $0) }
    }

    /**
     * Burn satoshi units of the given asset
     */
    public func addBurn(satoshi: UInt64, asset: AssetId) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_add_burn(self.uniffiClonePointer(),
                                                        FfiConverterUInt64.lower(satoshi),
                                                        FfiConverterTypeAssetId.lower(asset), $0)
            }
    }

    /**
     * Add a recipient receiving L-BTC
     */
    public func addLbtcRecipient(address: Address, satoshi: UInt64) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(self.uniffiClonePointer(),
                                                                  FfiConverterTypeAddress.lower(address),
                                                                  FfiConverterUInt64.lower(satoshi), $0)
            }
    }

    /**
     * Add a recipient receiving the given asset
     */
    public func addRecipient(address: Address, satoshi: UInt64, asset: AssetId) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_add_recipient(self.uniffiClonePointer(),
                                                             FfiConverterTypeAddress.lower(address),
                                                             FfiConverterUInt64.lower(satoshi),
                                                             FfiConverterTypeAssetId.lower(asset), $0)
            }
    }

    /**
     * Sets the address to drain excess L-BTC to
     */
    public func drainLbtcTo(address: Address) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(self.uniffiClonePointer(),
                                                             FfiConverterTypeAddress.lower(address), $0)
            }
    }

    /**
     * Select all available L-BTC inputs
     */
    public func drainLbtcWallet() throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(self.uniffiClonePointer(), $0)
            }
    }

    /**
     * Set the fee rate
     */
    public func feeRate(rate: Float?) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_fee_rate(self.uniffiClonePointer(),
                                                        FfiConverterOptionFloat.lower(rate), $0)
            }
    }

    /**
     * Build the transaction
     */
    public func finish(wollet: Wollet) throws -> Pset {
        return try FfiConverterTypePset.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_finish(self.uniffiClonePointer(),
                                                      FfiConverterTypeWollet.lower(wollet), $0)
            }
        )
    }

    /**
     * Issue an asset, wrapper of [`lwk_wollet::TxBuilder::issue_asset()`]
     */
    public func issueAsset(assetSats: UInt64, assetReceiver: Address?, tokenSats: UInt64, tokenReceiver: Address?, contract: Contract?) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_issue_asset(self.uniffiClonePointer(),
                                                           FfiConverterUInt64.lower(assetSats),
                                                           FfiConverterOptionTypeAddress.lower(assetReceiver),
                                                           FfiConverterUInt64.lower(tokenSats),
                                                           FfiConverterOptionTypeAddress.lower(tokenReceiver),
                                                           FfiConverterOptionTypeContract.lower(contract), $0)
            }
    }

    /**
     * Reissue an asset, wrapper of [`lwk_wollet::TxBuilder::reissue_asset()`]
     */
    public func reissueAsset(assetToReissue: AssetId, satoshiToReissue: UInt64, assetReceiver: Address?, issuanceTx: Transaction?) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_txbuilder_reissue_asset(self.uniffiClonePointer(),
                                                             FfiConverterTypeAssetId.lower(assetToReissue),
                                                             FfiConverterUInt64.lower(satoshiToReissue),
                                                             FfiConverterOptionTypeAddress.lower(assetReceiver),
                                                             FfiConverterOptionTypeTransaction.lower(issuanceTx), $0)
            }
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeTxBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TxBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TxBuilder {
        return TxBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TxBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TxBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeTxBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> TxBuilder {
    return try FfiConverterTypeTxBuilder.lift(pointer)
}

public func FfiConverterTypeTxBuilder_lower(_ value: TxBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTxBuilder.lower(value)
}

public protocol TxOutSecretsProtocol: AnyObject {
    func asset() -> AssetId

    func assetBf() -> Hex

    func value() -> UInt64

    func valueBf() -> Hex
}

public class TxOutSecrets:
    TxOutSecretsProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_txoutsecrets(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_txoutsecrets(pointer, $0) }
    }

    public func asset() -> AssetId {
        return try! FfiConverterTypeAssetId.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txoutsecrets_asset(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func assetBf() -> Hex {
        return try! FfiConverterTypeHex.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txoutsecrets_asset_bf(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func value() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txoutsecrets_value(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func valueBf() -> Hex {
        return try! FfiConverterTypeHex.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txoutsecrets_value_bf(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeTxOutSecrets: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TxOutSecrets

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TxOutSecrets {
        return TxOutSecrets(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TxOutSecrets) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxOutSecrets {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TxOutSecrets, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeTxOutSecrets_lift(_ pointer: UnsafeMutableRawPointer) throws -> TxOutSecrets {
    return try FfiConverterTypeTxOutSecrets.lift(pointer)
}

public func FfiConverterTypeTxOutSecrets_lower(_ value: TxOutSecrets) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTxOutSecrets.lower(value)
}

public protocol TxidProtocol: AnyObject {
    func bytes() -> Data
}

public class Txid:
    CustomStringConvertible,
    TxidProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_txid(self.pointer, $0) }
    }

    /**
     * Construct a Txid object
     */
    public convenience init(hex: Hex) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_txid_new(
                FfiConverterTypeHex.lower(hex), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_txid(pointer, $0) }
    }

    public func bytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txid_bytes(self.uniffiClonePointer(), $0)
                }
        )
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_txid_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeTxid: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Txid

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Txid {
        return Txid(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Txid) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Txid {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Txid, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeTxid_lift(_ pointer: UnsafeMutableRawPointer) throws -> Txid {
    return try FfiConverterTypeTxid.lift(pointer)
}

public func FfiConverterTypeTxid_lower(_ value: Txid) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTxid.lower(value)
}

/**
 * Wrapper over [`lwk_wollet::Update`]
 */
public protocol UpdateProtocol: AnyObject {
    func serialize() throws -> Data
}

/**
 * Wrapper over [`lwk_wollet::Update`]
 */
public class Update:
    UpdateProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_update(self.pointer, $0) }
    }

    public convenience init(bytes: Data) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_update_new(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_update(pointer, $0) }
    }

    public func serialize() throws -> Data {
        return try FfiConverterData.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_update_serialize(self.uniffiClonePointer(), $0)
            }
        )
    }
}

public struct FfiConverterTypeUpdate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Update

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Update {
        return Update(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Update) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Update {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Update, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeUpdate_lift(_ pointer: UnsafeMutableRawPointer) throws -> Update {
    return try FfiConverterTypeUpdate.lift(pointer)
}

public func FfiConverterTypeUpdate_lower(_ value: Update) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUpdate.lower(value)
}

public protocol WalletTxProtocol: AnyObject {
    func balance() -> [AssetId: Int64]

    func fee() -> UInt64

    func height() -> UInt32?

    func inputs() -> [WalletTxOut?]

    func outputs() -> [WalletTxOut?]

    func timestamp() -> UInt32?

    func tx() -> Transaction

    func txid() -> Txid

    func type() -> String

    func unblindedUrl(explorerUrl: String) -> String
}

public class WalletTx:
    WalletTxProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_wallettx(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_wallettx(pointer, $0) }
    }

    public func balance() -> [AssetId: Int64] {
        return try! FfiConverterDictionaryTypeAssetIdInt64.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_balance(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func fee() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_fee(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func height() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_height(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func inputs() -> [WalletTxOut?] {
        return try! FfiConverterSequenceOptionTypeWalletTxOut.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_inputs(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func outputs() -> [WalletTxOut?] {
        return try! FfiConverterSequenceOptionTypeWalletTxOut.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_outputs(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func timestamp() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_timestamp(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func tx() -> Transaction {
        return try! FfiConverterTypeTransaction.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_tx(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func txid() -> Txid {
        return try! FfiConverterTypeTxid.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_txid(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func type() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_type_(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func unblindedUrl(explorerUrl: String) -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettx_unblinded_url(self.uniffiClonePointer(),
                                                                FfiConverterString.lower(explorerUrl), $0)
                }
        )
    }
}

public struct FfiConverterTypeWalletTx: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletTx

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletTx {
        return WalletTx(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletTx) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletTx {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletTx, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeWalletTx_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletTx {
    return try FfiConverterTypeWalletTx.lift(pointer)
}

public func FfiConverterTypeWalletTx_lower(_ value: WalletTx) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletTx.lower(value)
}

public protocol WalletTxOutProtocol: AnyObject {
    func extInt() -> Chain

    func height() -> UInt32?

    func outpoint() -> OutPoint

    func scriptPubkey() -> Script

    func unblinded() -> TxOutSecrets

    func wildcardIndex() -> UInt32
}

public class WalletTxOut:
    WalletTxOutProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_wallettxout(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_wallettxout(pointer, $0) }
    }

    public func extInt() -> Chain {
        return try! FfiConverterTypeChain.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_ext_int(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func height() -> UInt32? {
        return try! FfiConverterOptionUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_height(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func outpoint() -> OutPoint {
        return try! FfiConverterTypeOutPoint.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_outpoint(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func scriptPubkey() -> Script {
        return try! FfiConverterTypeScript.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_script_pubkey(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func unblinded() -> TxOutSecrets {
        return try! FfiConverterTypeTxOutSecrets.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_unblinded(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func wildcardIndex() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wallettxout_wildcard_index(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeWalletTxOut: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletTxOut

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletTxOut {
        return WalletTxOut(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletTxOut) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletTxOut {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletTxOut, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeWalletTxOut_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletTxOut {
    return try FfiConverterTypeWalletTxOut.lift(pointer)
}

public func FfiConverterTypeWalletTxOut_lower(_ value: WalletTxOut) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletTxOut.lower(value)
}

/**
 * A Watch-Only wallet, wrapper over [`lwk_wollet::Wollet`]
 */
public protocol WolletProtocol: AnyObject {
    func address(index: UInt32?) throws -> AddressResult

    func applyUpdate(update: Update) throws

    func balance() throws -> [AssetId: UInt64]

    func descriptor() throws -> WolletDescriptor

    func finalize(pset: Pset) throws -> Pset

    func transactions() throws -> [WalletTx]

    /**
     * Note this a test method but we are not feature gating in test because we need it in
     * destination language examples
     */
    func waitForTx(txid: Txid, client: ElectrumClient) throws -> WalletTx
}

/**
 * A Watch-Only wallet, wrapper over [`lwk_wollet::Wollet`]
 */
public class Wollet:
    WolletProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_wollet(self.pointer, $0) }
    }

    /**
     * Construct a Watch-Only wallet object
     */
    public convenience init(network: Network, descriptor: WolletDescriptor, datadir: String?) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_wollet_new(
                FfiConverterTypeNetwork.lower(network),
                FfiConverterTypeWolletDescriptor.lower(descriptor),
                FfiConverterOptionString.lower(datadir), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_wollet(pointer, $0) }
    }

    /**
     * Construct a Watch-Only wallet object with a caller provided persister
     */
    public static func withCustomPersister(network: Network, descriptor: WolletDescriptor, persister: ForeignPersisterLink) throws -> Wollet {
        return try Wollet(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_wollet_with_custom_persister(
                FfiConverterTypeNetwork.lower(network),
                FfiConverterTypeWolletDescriptor.lower(descriptor),
                FfiConverterTypeForeignPersisterLink.lower(persister), $0
            )
        })
    }

    public func address(index: UInt32?) throws -> AddressResult {
        return try FfiConverterTypeAddressResult.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_address(self.uniffiClonePointer(),
                                                    FfiConverterOptionUInt32.lower(index), $0)
            }
        )
    }

    public func applyUpdate(update: Update) throws {
        try
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_apply_update(self.uniffiClonePointer(),
                                                         FfiConverterTypeUpdate.lower(update), $0)
            }
    }

    public func balance() throws -> [AssetId: UInt64] {
        return try FfiConverterDictionaryTypeAssetIdUInt64.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_balance(self.uniffiClonePointer(), $0)
            }
        )
    }

    public func descriptor() throws -> WolletDescriptor {
        return try FfiConverterTypeWolletDescriptor.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_descriptor(self.uniffiClonePointer(), $0)
            }
        )
    }

    public func finalize(pset: Pset) throws -> Pset {
        return try FfiConverterTypePset.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_finalize(self.uniffiClonePointer(),
                                                     FfiConverterTypePset.lower(pset), $0)
            }
        )
    }

    public func transactions() throws -> [WalletTx] {
        return try FfiConverterSequenceTypeWalletTx.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_transactions(self.uniffiClonePointer(), $0)
            }
        )
    }

    /**
     * Note this a test method but we are not feature gating in test because we need it in
     * destination language examples
     */
    public func waitForTx(txid: Txid, client: ElectrumClient) throws -> WalletTx {
        return try FfiConverterTypeWalletTx.lift(
            rustCallWithError(FfiConverterTypeLwkError.lift) {
                uniffi_lwk_fn_method_wollet_wait_for_tx(self.uniffiClonePointer(),
                                                        FfiConverterTypeTxid.lower(txid),
                                                        FfiConverterTypeElectrumClient.lower(client), $0)
            }
        )
    }
}

public struct FfiConverterTypeWollet: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wollet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wollet {
        return Wollet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wollet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wollet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wollet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeWollet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wollet {
    return try FfiConverterTypeWollet.lift(pointer)
}

public func FfiConverterTypeWollet_lower(_ value: Wollet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWollet.lower(value)
}

/**
 * The output descriptors, wrapper over [`lwk_wollet::WolletDescriptor`]
 */
public protocol WolletDescriptorProtocol: AnyObject {}

/**
 * The output descriptors, wrapper over [`lwk_wollet::WolletDescriptor`]
 */
public class WolletDescriptor:
    CustomStringConvertible,
    WolletDescriptorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lwk_fn_clone_wolletdescriptor(self.pointer, $0) }
    }

    public convenience init(descriptor: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeLwkError.lift) {
            uniffi_lwk_fn_constructor_wolletdescriptor_new(
                FfiConverterString.lower(descriptor), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_lwk_fn_free_wolletdescriptor(pointer, $0) }
    }

    public var description: String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeWolletDescriptor: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WolletDescriptor

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WolletDescriptor {
        return WolletDescriptor(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WolletDescriptor) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WolletDescriptor {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WolletDescriptor, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeWolletDescriptor_lift(_ pointer: UnsafeMutableRawPointer) throws -> WolletDescriptor {
    return try FfiConverterTypeWolletDescriptor.lift(pointer)
}

public func FfiConverterTypeWolletDescriptor_lower(_ value: WolletDescriptor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWolletDescriptor.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Wallet chain
 */
public enum Chain {
    /**
     * External address, shown when asked for a payment.
     * Wallet having a single descriptor are considered External
     */
    case external
    /**
     * Internal address, used for the change
     */
    case `internal`
}

public struct FfiConverterTypeChain: FfiConverterRustBuffer {
    typealias SwiftType = Chain

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Chain {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .external

        case 2: return .internal

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Chain, into buf: inout [UInt8]) {
        switch value {
        case .external:
            writeInt(&buf, Int32(1))

        case .internal:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeChain_lift(_ buf: RustBuffer) throws -> Chain {
    return try FfiConverterTypeChain.lift(buf)
}

public func FfiConverterTypeChain_lower(_ value: Chain) -> RustBuffer {
    return FfiConverterTypeChain.lower(value)
}

extension Chain: Equatable, Hashable {}

/**
 * Possible errors emitted
 */
public enum LwkError {
    case Generic(
        msg: String
    )
    case PoisonError(
        msg: String
    )

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeLwkError.lift(error)
    }
}

public struct FfiConverterTypeLwkError: FfiConverterRustBuffer {
    typealias SwiftType = LwkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LwkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Generic(
                msg: FfiConverterString.read(from: &buf)
            )

        case 2: return try .PoisonError(
                msg: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LwkError, into buf: inout [UInt8]) {
        switch value {
        case let .Generic(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)

        case let .PoisonError(msg):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(msg, into: &buf)
        }
    }
}

extension LwkError: Equatable, Hashable {}

extension LwkError: Error {}

private struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionFloat: FfiConverterRustBuffer {
    typealias SwiftType = Float?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterFloat.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterFloat.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeContract: FfiConverterRustBuffer {
    typealias SwiftType = Contract?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeContract.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeContract.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = Transaction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransaction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransaction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeUpdate: FfiConverterRustBuffer {
    typealias SwiftType = Update?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUpdate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUpdate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeWalletTxOut: FfiConverterRustBuffer {
    typealias SwiftType = WalletTxOut?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWalletTxOut.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWalletTxOut.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeAssetId: FfiConverterRustBuffer {
    typealias SwiftType = AssetId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAssetId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAssetId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeWalletTx: FfiConverterRustBuffer {
    typealias SwiftType = [WalletTx]

    public static func write(_ value: [WalletTx], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeWalletTx.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [WalletTx] {
        let len: Int32 = try readInt(&buf)
        var seq = [WalletTx]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeWalletTx.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceOptionTypeWalletTxOut: FfiConverterRustBuffer {
    typealias SwiftType = [WalletTxOut?]

    public static func write(_ value: [WalletTxOut?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterOptionTypeWalletTxOut.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [WalletTxOut?] {
        let len: Int32 = try readInt(&buf)
        var seq = [WalletTxOut?]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterOptionTypeWalletTxOut.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryTypeAssetIdUInt64: FfiConverterRustBuffer {
    public static func write(_ value: [AssetId: UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeAssetId.write(key, into: &buf)
            FfiConverterUInt64.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetId: UInt64] {
        let len: Int32 = try readInt(&buf)
        var dict = [AssetId: UInt64]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterTypeAssetId.read(from: &buf)
            let value = try FfiConverterUInt64.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private struct FfiConverterDictionaryTypeAssetIdInt64: FfiConverterRustBuffer {
    public static func write(_ value: [AssetId: Int64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeAssetId.write(key, into: &buf)
            FfiConverterInt64.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetId: Int64] {
        let len: Int32 = try readInt(&buf)
        var dict = [AssetId: Int64]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterTypeAssetId.read(from: &buf)
            let value = try FfiConverterInt64.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AssetId = String
public struct FfiConverterTypeAssetId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AssetId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AssetId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AssetId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

public func FfiConverterTypeAssetId_lift(_ value: RustBuffer) throws -> AssetId {
    return try FfiConverterTypeAssetId.lift(value)
}

public func FfiConverterTypeAssetId_lower(_ value: AssetId) -> RustBuffer {
    return FfiConverterTypeAssetId.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Hex = String
public struct FfiConverterTypeHex: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hex {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Hex, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Hex {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Hex) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

public func FfiConverterTypeHex_lift(_ value: RustBuffer) throws -> Hex {
    return try FfiConverterTypeHex.lift(value)
}

public func FfiConverterTypeHex_lower(_ value: Hex) -> RustBuffer {
    return FfiConverterTypeHex.lower(value)
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_lwk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_lwk_checksum_method_address_is_blinded() != 34440 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_address_qr_code_text() != 34918 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_address_qr_code_uri() != 46341 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_address_script_pubkey() != 23569 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_address_to_unconfidential() != 28990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_addressresult_address() != 57079 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_addressresult_index() != 6170 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_electrumclient_broadcast() != 61535 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_electrumclient_full_scan() != 1491 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_esploraclient_broadcast() != 4633 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_esploraclient_full_scan() != 13126 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_foreignpersister_get() != 22697 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_foreignpersister_push() != 13825 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_network_default_electrum_client() != 57493 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_network_default_esplora_client() != 30029 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_network_is_mainnet() != 38901 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_network_policy_asset() != 61043 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_network_tx_builder() != 62021 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_outpoint_txid() != 59660 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_outpoint_vout() != 56493 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_precision_sats_to_string() != 49608 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_precision_string_to_sats() != 10000 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_pset_extract_tx() != 24108 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_pset_issuance_asset() != 13932 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_pset_issuance_token() != 40519 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_script_asm() != 38627 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_script_bytes() != 31898 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_signer_sign() != 44640 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor() != 55215 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_electrum_url() != 37727 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_generate() != 17157 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_get_new_address() != 11090 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_height() != 18988 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_issue_asset() != 56901 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_testenv_send_to_address() != 49506 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_transaction_bytes() != 35387 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_transaction_fee() != 996 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_transaction_txid() != 8927 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_add_burn() != 33429 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient() != 34015 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_add_recipient() != 39691 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to() != 40857 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet() != 46356 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_fee_rate() != 18798 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_finish() != 19714 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_issue_asset() != 3477 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txbuilder_reissue_asset() != 36494 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txoutsecrets_asset() != 21742 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txoutsecrets_asset_bf() != 27606 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txoutsecrets_value() != 64117 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txoutsecrets_value_bf() != 4095 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_txid_bytes() != 15950 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_update_serialize() != 9990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_balance() != 44398 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_fee() != 39011 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_height() != 12656 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_inputs() != 3951 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_outputs() != 55588 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_timestamp() != 12633 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_tx() != 23689 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_txid() != 36652 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_type_() != 59416 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettx_unblinded_url() != 31574 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_ext_int() != 60402 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_height() != 50237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_outpoint() != 58785 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_script_pubkey() != 50610 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_unblinded() != 57421 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wallettxout_wildcard_index() != 49286 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_address() != 2549 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_apply_update() != 47160 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_balance() != 6265 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_descriptor() != 25068 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_finalize() != 6068 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_transactions() != 35692 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_method_wollet_wait_for_tx() != 43566 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_address_new() != 10931 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_contract_new() != 48870 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_electrumclient_new() != 16620 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_esploraclient_new() != 20614 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_foreignpersisterlink_new() != 3785 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_mnemonic_new() != 22598 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_network_mainnet() != 46013 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_network_regtest() != 26624 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_network_regtest_default() != 22313 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_network_testnet() != 4834 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_outpoint_new() != 63211 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_precision_new() != 30874 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_pset_new() != 11455 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_script_new() != 2756 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_signer_new() != 63885 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_testenv_new() != 1727 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_transaction_new() != 1518 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_txbuilder_new() != 37947 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_txid_new() != 15999 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_update_new() != 14816 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_wollet_new() != 34562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_wollet_with_custom_persister() != 20113 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_lwk_checksum_constructor_wolletdescriptor_new() != 28418 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitForeignPersister()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
